{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentNumber","setCurrentNumber","currentUserPC","setCurrentUserPC","input","setInput","gameStarted","setGameStarted","output","setOutput","score","localStorage","getItem","highScore","whatIsCurrentNumber","isNumberDivisible","dividend","divisor","isFizz","isBuzz","outputString","handleNextPlayer","handleGameOver","points","setItem","fizzOrBuzz","className","length","map","out","index","onSubmit","e","preventDefault","inputUpperCase","toUpperCase","Math","random","handleUserCommands","autoComplete","type","name","value","onChange","target","autoFocus","size","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7171d36c.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [currentNumber, setCurrentNumber] = useState(1);\n  const [currentUserPC, setCurrentUserPC] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [output, setOutput] = useState([]);\n\n  const fizzValue = 3;\n  const buzzValue = 5;\n  const score = localStorage.getItem(\"LastGameScore\");\n  const highScore = localStorage.getItem(\"HighScore\");\n\n  const whatIsCurrentNumber = () => {\n    const isNumberDivisible = (dividend, divisor) => dividend % divisor === 0;\n    let isFizz = isNumberDivisible(currentNumber, fizzValue);\n    let isBuzz = isNumberDivisible(currentNumber, buzzValue);\n\n    if (isFizz || isBuzz) {\n      let outputString = \"\";\n      if (isFizz) {\n        outputString += \"Fizz\";\n      }\n      if (isBuzz) {\n        outputString += \"Buzz\";\n      }\n      return outputString;\n    } else {\n      //Not a Fizz / Buzz number\n      return false;\n    }\n  };\n\n  const handleNextPlayer = () => {\n    setCurrentUserPC(!currentUserPC);\n    setCurrentNumber(currentNumber + 1);\n  };\n\n  const handleGameOver = () => {\n    // if you failed we count the points earned and save it to localStorage and humiliate you.\n    let points = currentNumber - 1;\n\n    if (points > highScore) {\n      localStorage.setItem(\"HighScore\", points);\n      setOutput([`Game Over!You earned ${points} points, a new high score!`]);\n    } else {\n      setOutput([`Game Over! You earned ${points} points.`]);\n    }\n\n    localStorage.setItem(\"LastGameScore\", points);\n    setGameStarted(false);\n  };\n\n  const handleUserCommands = (e) => {\n    e.preventDefault();\n    let fizzOrBuzz = whatIsCurrentNumber();\n    let inputUpperCase = input.toUpperCase();\n\n    if (gameStarted) {\n      // If we have started a game we only need to keep track if input matching our rules.\n      if (fizzOrBuzz) {\n        //Current Number is a fizz / buzz number\n\n        if (inputUpperCase === fizzOrBuzz.toUpperCase()) {\n          setOutput([...output, fizzOrBuzz]);\n          handleNextPlayer();\n        } else {\n          handleGameOver();\n        }\n      } else {\n        // Current Number is normal number\n\n        if (input - 0 === currentNumber) {\n          setOutput([...output, input]);\n          handleNextPlayer();\n        } else {\n          handleGameOver();\n        }\n      }\n    } else {\n      // If we are not playing we are watching for the allowable commands.\n\n      switch (inputUpperCase) {\n        case \"START\":\n          setGameStarted(true);\n          setCurrentUserPC(Math.random() < 0.5);\n          setCurrentNumber(1);\n          setOutput([\"Waiting for user input..\"]);\n          break;\n        case \"SCORE\":\n          setOutput([`Last game you manage a measly ${score} points.`]);\n          break;\n        case \"HIGHSCORE\":\n          setOutput([`Currently highest score is ${highScore} points.`]);\n          break;\n        case \"RULES\":\n        case \"EXIT\":\n          setGameStarted(false);\n          setOutput([]);\n          break;\n        default:\n          setOutput([`Invalid command.`]);\n      }\n    }\n    setInput(\"\");\n  };\n\n  if (gameStarted && currentUserPC) {\n    // Computers 'moves' made here.. All Hail Our Computer Overlords!\n    let fizzOrBuzz = whatIsCurrentNumber();\n\n    if (currentNumber === 1) {\n      setOutput([currentNumber]);\n    } else {\n      if (fizzOrBuzz) {\n        setOutput([...output, fizzOrBuzz]);\n      } else {\n        setOutput([...output, currentNumber]);\n      }\n    }\n\n    handleNextPlayer();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to the game of FizzBuzz!</h1>\n      </header>\n      <main>\n        {gameStarted || output.length > 0 ? (\n          <ul className=\"App-chat\">\n            {output.map((out, index) => (\n              <li key={index}>{out}</li>\n            ))}\n          </ul>\n        ) : (\n          <>\n            <h3>Rules:</h3>\n            <ul>\n              <li>Counting starts from 1.</li>\n              <li>Players take turns incrementing the number by 1.</li>\n              <li>\n                If the number is divisible by 3, replace the number with the\n                word 'Fizz'.\n              </li>\n              <li>\n                If the number is divisible by 5, replace the number with the\n                word 'buzz'.\n              </li>\n              <li>\n                If the number is divisible by both, write the word 'FizzBuzz'.\n              </li>\n            </ul>\n            To start a new game, type <em>'start'</em>.\n            <br />\n            To check the previous score, type <em>'score'</em>.\n            <br />\n            To check the current highscore, type <em>'highscore'</em>.\n            <br />\n            To see the rules type <em>'rules'</em>.\n            <br />\n          </>\n        )}\n      </main>\n      <form\n        className=\"App-user-input\"\n        onSubmit={(e) => handleUserCommands(e)}\n        autoComplete=\"off\"\n      >\n        <input\n          type=\"text\"\n          name=\"input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          autoFocus\n          size=\"8\"\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}